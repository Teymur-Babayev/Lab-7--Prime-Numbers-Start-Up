package Primes;
/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*<pre>
 * Class        PrimeNumbers
 * File         PrimeNumbers.java
 * Description	Displays prime numbers, tests for primeness, prime 
 *              decomposition, and range of primes number and many others.
 * Environment	PC, Windows 10, jdk1.8.0_241, NetBeans 11.3
 * Date         5/14/2010
 * History Log  10/2/2001, 4/13/2005, 10/14/2006, 10/5/2009
 * @author	<i>Niko Culevski</i>
 * @version	%3% %4%
 * @see       	javax.swing.Swing
*</pre> 
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
import java.awt.print.PrinterException;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class PrimesGUI extends JFrame
{
    /** Class instance fields */
    private int whichRadio = 0;
    private final int MAX_INPUT = 1000000;  // maximum number of primes
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Constructor  PrimesGUI()-default constructor
     * Description  Create an instance of the GUI form, set the default
     *              JButton to be calculateJButton, set icon image, center form.
     * Date         5/14/2020
     * History Log  7/18/2018  
     * @author      <i>Niko Culevski</i>     
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public PrimesGUI()
    {
        initComponents();
        this.getRootPane().setDefaultButton(calculateJButton); 
        //set icon
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Images/pi.jpg"));
        this.setLocationRelativeTo(null);       //center form
        //set background color
        this.getContentPane().setBackground(new Color(255,255,204));  
        listAllJTextField.requestFocus();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        radioJButtonGroup = new javax.swing.ButtonGroup();
        menuJButtonGroup = new javax.swing.ButtonGroup();
        choiceJPanel = new javax.swing.JPanel();
        listAllJRadioButton = new javax.swing.JRadioButton();
        listAllJTextField = new javax.swing.JTextField();
        isPrimeJRadioButton = new javax.swing.JRadioButton();
        isPrimeJTextField = new javax.swing.JTextField();
        factorizationJRadioButton = new javax.swing.JRadioButton();
        factorizationJTextField = new javax.swing.JTextField();
        rangeJRadioButton = new javax.swing.JRadioButton();
        lowJTextField = new javax.swing.JTextField();
        fromJLabel = new javax.swing.JLabel();
        toJLabel = new javax.swing.JLabel();
        highJTextField = new javax.swing.JTextField();
        goldbachJRadioButton = new javax.swing.JRadioButton();
        goldbachJTextField = new javax.swing.JTextField();
        palindromicJRadioButton = new javax.swing.JRadioButton();
        palindromicJTextField = new javax.swing.JTextField();
        emirpJRadioButton = new javax.swing.JRadioButton();
        emirpJTextField = new javax.swing.JTextField();
        sophieGermainJRadioButton = new javax.swing.JRadioButton();
        sophieGermainJTextField = new javax.swing.JTextField();
        safeJRadioButton = new javax.swing.JRadioButton();
        safeJTextField = new javax.swing.JTextField();
        displayJPanel = new javax.swing.JPanel();
        displayJScrollPanel = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        controlPanel = new javax.swing.JPanel();
        calculateJButton = new javax.swing.JButton();
        clearJButton = new javax.swing.JButton();
        printJButton = new javax.swing.JButton();
        quitJButton = new javax.swing.JButton();
        primesJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        clearJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        actionJMenu = new javax.swing.JMenu();
        listPrimesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        testForPrimeJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        primeFactorizationJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        rangeOfPrimesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        goldbachJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        palindromicJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        emirpJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        sophieGermainJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        safeJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutrJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prime Numbers");
        setPreferredSize(new java.awt.Dimension(620, 480));
        setResizable(false);

        choiceJPanel.setBackground(new java.awt.Color(255, 204, 204));
        choiceJPanel.setMinimumSize(new java.awt.Dimension(270, 130));
        choiceJPanel.setPreferredSize(new java.awt.Dimension(290, 130));

        listAllJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(listAllJRadioButton);
        listAllJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        listAllJRadioButton.setSelected(true);
        listAllJRadioButton.setText("How many prime numbers?");
        listAllJRadioButton.setToolTipText("");
        listAllJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                listAllJRadioButtonItemStateChanged(evt);
            }
        });
        listAllJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                listAllJRadioButtonActionPerformed(evt);
            }
        });

        listAllJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        listAllJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        listAllJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        listAllJTextField.setVerifyInputWhenFocusTarget(false);
        listAllJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                listAllJTextFieldActionPerformed(evt);
            }
        });

        isPrimeJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(isPrimeJRadioButton);
        isPrimeJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        isPrimeJRadioButton.setText("Is this a prime number?");
        isPrimeJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                isPrimeJRadioButtonItemStateChanged(evt);
            }
        });
        isPrimeJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                isPrimeJRadioButtonActionPerformed(evt);
            }
        });

        isPrimeJTextField.setEditable(false);
        isPrimeJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        isPrimeJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        isPrimeJTextField.setToolTipText("Test if provided integer ( > 2) is prime");
        isPrimeJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                isPrimeJTextFieldActionPerformed(evt);
            }
        });

        factorizationJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(factorizationJRadioButton);
        factorizationJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        factorizationJRadioButton.setText("Find prime factorization of?");
        factorizationJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                factorizationJRadioButtonItemStateChanged(evt);
            }
        });
        factorizationJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                factorizationJRadioButtonActionPerformed(evt);
            }
        });

        factorizationJTextField.setEditable(false);
        factorizationJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        factorizationJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        factorizationJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                factorizationJTextFieldActionPerformed(evt);
            }
        });

        rangeJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(rangeJRadioButton);
        rangeJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        rangeJRadioButton.setText("Range of prime numbers");
        rangeJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                rangeJRadioButtonItemStateChanged(evt);
            }
        });
        rangeJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rangeJRadioButtonActionPerformed(evt);
            }
        });

        lowJTextField.setEditable(false);
        lowJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        lowJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        lowJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lowJTextFieldActionPerformed(evt);
            }
        });

        fromJLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        fromJLabel.setText("From");

        toJLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        toJLabel.setText("To");

        highJTextField.setEditable(false);
        highJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        highJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        highJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                highJTextFieldActionPerformed(evt);
            }
        });

        goldbachJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(goldbachJRadioButton);
        goldbachJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        goldbachJRadioButton.setText("Goldbach's conjecture");
        goldbachJRadioButton.setToolTipText("Test Goldbach's Conjecture");
        goldbachJRadioButton.setActionCommand("goldbach");
        goldbachJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                goldbachJRadioButtonItemStateChanged(evt);
            }
        });
        goldbachJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                goldbachJRadioButtonActionPerformed(evt);
            }
        });

        goldbachJTextField.setEditable(false);
        goldbachJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        goldbachJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        goldbachJTextField.setToolTipText("Enter an even integer > 2");
        goldbachJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                goldbachJTextFieldActionPerformed(evt);
            }
        });

        palindromicJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(palindromicJRadioButton);
        palindromicJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        palindromicJRadioButton.setText("How many palindromic primes?");
        palindromicJRadioButton.setToolTipText("<html>A palindromic prime is a number that is simultaneously palindromic and prime. <br>The first few (base-10) palindromic primes are 2, 3, 5, 7, 11, 101, 131, 151, 181, <br>191, 313, 353, 373, 383, 727, 757, 787, ...</html>");
        palindromicJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                palindromicJRadioButtonItemStateChanged(evt);
            }
        });
        palindromicJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                palindromicJRadioButtonActionPerformed(evt);
            }
        });

        palindromicJTextField.setEditable(false);
        palindromicJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        palindromicJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        palindromicJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        palindromicJTextField.setVerifyInputWhenFocusTarget(false);
        palindromicJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                palindromicJTextFieldActionPerformed(evt);
            }
        });

        emirpJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(emirpJRadioButton);
        emirpJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        emirpJRadioButton.setText("How many emipr numbers?");
        emirpJRadioButton.setToolTipText("");
        emirpJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                emirpJRadioButtonItemStateChanged(evt);
            }
        });
        emirpJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                emirpJRadioButtonActionPerformed(evt);
            }
        });

        emirpJTextField.setEditable(false);
        emirpJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        emirpJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        emirpJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        emirpJTextField.setVerifyInputWhenFocusTarget(false);
        emirpJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                emirpJTextFieldActionPerformed(evt);
            }
        });

        sophieGermainJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(sophieGermainJRadioButton);
        sophieGermainJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        sophieGermainJRadioButton.setText("How many Germain primes?");
        sophieGermainJRadioButton.setToolTipText("<html>A prime p is said to be a Sophie Germain prime if both p and 2p + 1 are prime. <br>The first few Sophie Germain primes are 2, 3, 5, 11, 23, 29, 41, 53, 83, 89, 113, 131, ...</html>");
        sophieGermainJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                sophieGermainJRadioButtonItemStateChanged(evt);
            }
        });
        sophieGermainJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sophieGermainJRadioButtonActionPerformed(evt);
            }
        });

        sophieGermainJTextField.setEditable(false);
        sophieGermainJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        sophieGermainJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sophieGermainJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        sophieGermainJTextField.setVerifyInputWhenFocusTarget(false);
        sophieGermainJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sophieGermainJTextFieldActionPerformed(evt);
            }
        });

        safeJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(safeJRadioButton);
        safeJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        safeJRadioButton.setText("How many safe primes?");
        safeJRadioButton.setToolTipText("<html>A safe prime is a prime number of the form 2p + 1, where p is also a prime.<br> The first few safe primes are 5, 7, 11, 23, 47, 59, 83, 107, 167, 179, 227, 263, 347, ...</html>");
        safeJRadioButton.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                safeJRadioButtonItemStateChanged(evt);
            }
        });
        safeJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                safeJRadioButtonActionPerformed(evt);
            }
        });

        safeJTextField.setEditable(false);
        safeJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        safeJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        safeJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        safeJTextField.setVerifyInputWhenFocusTarget(false);
        safeJTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                safeJTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout choiceJPanelLayout = new javax.swing.GroupLayout(choiceJPanel);
        choiceJPanel.setLayout(choiceJPanelLayout);
        choiceJPanelLayout.setHorizontalGroup(
            choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choiceJPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(palindromicJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(palindromicJTextField))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listAllJRadioButton)
                            .addComponent(isPrimeJRadioButton)
                            .addComponent(factorizationJRadioButton))
                        .addGap(22, 22, 22)
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isPrimeJTextField)
                            .addComponent(factorizationJTextField)
                            .addComponent(listAllJTextField)))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(sophieGermainJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sophieGermainJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(safeJRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(safeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(choiceJPanelLayout.createSequentialGroup()
                                .addComponent(goldbachJRadioButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(choiceJPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(fromJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lowJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(toJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(highJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goldbachJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(rangeJRadioButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(emirpJRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(emirpJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        choiceJPanelLayout.setVerticalGroup(
            choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choiceJPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listAllJRadioButton)
                    .addComponent(listAllJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(isPrimeJRadioButton))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isPrimeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(factorizationJRadioButton)
                    .addComponent(factorizationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(rangeJRadioButton)
                .addGap(4, 4, 4)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(highJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goldbachJRadioButton)
                    .addComponent(goldbachJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(palindromicJRadioButton)
                    .addComponent(palindromicJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emirpJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emirpJRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sophieGermainJRadioButton)
                    .addComponent(sophieGermainJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(safeJRadioButton)
                    .addComponent(safeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(choiceJPanel, java.awt.BorderLayout.WEST);

        displayJPanel.setBackground(new java.awt.Color(255, 204, 204));
        displayJPanel.setPreferredSize(new java.awt.Dimension(320, 180));

        displayTextArea.setEditable(false);
        displayTextArea.setFont(new java.awt.Font("MonoSpaced", 1, 12)); // NOI18N
        displayTextArea.setLineWrap(true);
        displayTextArea.setWrapStyleWord(true);
        displayJScrollPanel.setViewportView(displayTextArea);

        javax.swing.GroupLayout displayJPanelLayout = new javax.swing.GroupLayout(displayJPanel);
        displayJPanel.setLayout(displayJPanelLayout);
        displayJPanelLayout.setHorizontalGroup(
            displayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayJPanelLayout.createSequentialGroup()
                .addComponent(displayJScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        displayJPanelLayout.setVerticalGroup(
            displayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayJScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(displayJPanel, java.awt.BorderLayout.CENTER);

        controlPanel.setBackground(new java.awt.Color(255, 204, 204));
        controlPanel.setPreferredSize(new java.awt.Dimension(380, 50));
        controlPanel.setLayout(new java.awt.GridLayout(1, 4));

        calculateJButton.setBackground(new java.awt.Color(255, 255, 204));
        calculateJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        calculateJButton.setMnemonic('C');
        calculateJButton.setText("Calculate");
        calculateJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                calculateJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(calculateJButton);

        clearJButton.setBackground(new java.awt.Color(255, 255, 204));
        clearJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        clearJButton.setMnemonic('l');
        clearJButton.setText("Clear");
        clearJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(clearJButton);

        printJButton.setBackground(new java.awt.Color(255, 255, 204));
        printJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        printJButton.setMnemonic('P');
        printJButton.setText("Print");
        printJButton.setToolTipText("Print content of JTExtField");
        printJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                printJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(printJButton);

        quitJButton.setBackground(new java.awt.Color(255, 255, 204));
        quitJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        quitJButton.setMnemonic('Q');
        quitJButton.setText("Quit");
        quitJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(quitJButton);

        getContentPane().add(controlPanel, java.awt.BorderLayout.SOUTH);

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        clearJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        clearJMenuItem.setMnemonic('C');
        clearJMenuItem.setText("Clear");
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);

        printJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printJMenuItem.setMnemonic('P');
        printJMenuItem.setText("Print Form");
        printJMenuItem.setToolTipText("Print Form a sGUI");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        exitJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitJMenuItem.setMnemonic('x');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        primesJMenuBar.add(fileJMenu);

        actionJMenu.setMnemonic('A');
        actionJMenu.setText("Action");

        menuJButtonGroup.add(listPrimesJRadioButtonMenuItem);
        listPrimesJRadioButtonMenuItem.setMnemonic('L');
        listPrimesJRadioButtonMenuItem.setSelected(true);
        listPrimesJRadioButtonMenuItem.setText("List Primes");
        listPrimesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                listPrimesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(listPrimesJRadioButtonMenuItem);

        menuJButtonGroup.add(testForPrimeJRadioButtonMenuItem);
        testForPrimeJRadioButtonMenuItem.setMnemonic('T');
        testForPrimeJRadioButtonMenuItem.setText("Test for Prime");
        testForPrimeJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                testForPrimeJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(testForPrimeJRadioButtonMenuItem);

        menuJButtonGroup.add(primeFactorizationJRadioButtonMenuItem);
        primeFactorizationJRadioButtonMenuItem.setMnemonic('F');
        primeFactorizationJRadioButtonMenuItem.setText("Primes Factorization");
        primeFactorizationJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                primeFactorizationJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(primeFactorizationJRadioButtonMenuItem);

        menuJButtonGroup.add(rangeOfPrimesJRadioButtonMenuItem);
        rangeOfPrimesJRadioButtonMenuItem.setMnemonic('R');
        rangeOfPrimesJRadioButtonMenuItem.setText("Range of Primes");
        rangeOfPrimesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rangeOfPrimesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(rangeOfPrimesJRadioButtonMenuItem);

        menuJButtonGroup.add(goldbachJRadioButtonMenuItem);
        goldbachJRadioButtonMenuItem.setMnemonic('R');
        goldbachJRadioButtonMenuItem.setText("Goldbach's conjecture");
        goldbachJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                goldbachJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(goldbachJRadioButtonMenuItem);

        menuJButtonGroup.add(palindromicJRadioButtonMenuItem);
        palindromicJRadioButtonMenuItem.setMnemonic('m');
        palindromicJRadioButtonMenuItem.setText("Palindromic Primes");
        palindromicJRadioButtonMenuItem.setToolTipText("List specified number of palindromic primes");
        palindromicJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                palindromicJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(palindromicJRadioButtonMenuItem);

        menuJButtonGroup.add(emirpJRadioButtonMenuItem);
        emirpJRadioButtonMenuItem.setMnemonic('R');
        emirpJRadioButtonMenuItem.setText("List emirp");
        emirpJRadioButtonMenuItem.setToolTipText("List specified number of emirp = palindromic prime numbers");
        emirpJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                emirpJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(emirpJRadioButtonMenuItem);

        menuJButtonGroup.add(sophieGermainJRadioButtonMenuItem);
        sophieGermainJRadioButtonMenuItem.setMnemonic('R');
        sophieGermainJRadioButtonMenuItem.setText("Sophie Germain Primes");
        sophieGermainJRadioButtonMenuItem.setToolTipText("List specified number of emirp = nonpalindromic prime number whose reversal is also a prime");
        sophieGermainJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sophieGermainJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(sophieGermainJRadioButtonMenuItem);

        menuJButtonGroup.add(safeJRadioButtonMenuItem);
        safeJRadioButtonMenuItem.setText("Safe Primes");
        safeJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                safeJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(safeJRadioButtonMenuItem);

        primesJMenuBar.add(actionJMenu);

        helpJMenu.setMnemonic('H');
        helpJMenu.setText("Help");

        aboutrJMenuItem.setMnemonic('A');
        aboutrJMenuItem.setText("About");
        aboutrJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutrJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutrJMenuItem);

        primesJMenuBar.add(helpJMenu);

        setJMenuBar(primesJMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       clearJMenuItemActionPerformed
     * Description  Method to clear all and reset form. Calls 
     *              clearJButtonActionPerformed event handler.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearJMenuItemActionPerformed
    {//GEN-HEADEREND:event_clearJMenuItemActionPerformed
        clearJButtonActionPerformed(evt);
    }//GEN-LAST:event_clearJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       printJMenuItemActionPerformed
     * Description  Method to print form as GUI. Calls PrintUtilities's 
     *              printComponent method.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printJMenuItemActionPerformed
    {//GEN-HEADEREND:event_printJMenuItemActionPerformed
        //http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-Printing.html
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       exitJMenuItemActionPerformed
     * Description  End the application.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitJMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitJMenuItemActionPerformed
        quitJButtonActionPerformed(evt);
    }//GEN-LAST:event_exitJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       listPrimesJRadioButtonMenuItemActionPerformed
     * Description  Select the list all primes radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void listPrimesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_listPrimesJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_listPrimesJRadioButtonMenuItemActionPerformed
        isPrimeJRadioButton.setSelected(true);
    }//GEN-LAST:event_listPrimesJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       testForPrimeJRadioButtonMenuItemActionPerformed
     * Description  Select the test for prime radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void testForPrimeJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_testForPrimeJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_testForPrimeJRadioButtonMenuItemActionPerformed
        isPrimeJRadioButton.setSelected(true);
    }//GEN-LAST:event_testForPrimeJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       primeFactorizationJRadioButtonMenuItemActionPerformed
     * Description  Select the prime factorization radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void primeFactorizationJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_primeFactorizationJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_primeFactorizationJRadioButtonMenuItemActionPerformed
        factorizationJRadioButton.setSelected(true);
    }//GEN-LAST:event_primeFactorizationJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       rangeOfPrimesJRadioButtonMenuItemActionPerformed
     * Description  Select range of primes radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void rangeOfPrimesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rangeOfPrimesJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_rangeOfPrimesJRadioButtonMenuItemActionPerformed
        rangeJRadioButton.setSelected(true);
    }//GEN-LAST:event_rangeOfPrimesJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       goldbachJRadioButtonMenuItemActionPerformed
     * Description  Select goldbach radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void goldbachJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goldbachJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_goldbachJRadioButtonMenuItemActionPerformed
        goldbachJRadioButton.setSelected(true);
    }//GEN-LAST:event_goldbachJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       emirpJRadioButtonMenuItemActionPerformed
     * Description  Select emirp radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void emirpJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_emirpJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_emirpJRadioButtonMenuItemActionPerformed
        emirpJRadioButton.setSelected(true);
    }//GEN-LAST:event_emirpJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       aboutrJMenuItemActionPerformed
     * Description  Create and show About form.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutrJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutrJMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutrJMenuItemActionPerformed
        About myAbout = new About(this, true);
        myAbout.setVisible(true);
    }//GEN-LAST:event_aboutrJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       calculateJButtonActionPerformed
     * Description  Method to select appropriate method for prime operation.                   
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
     * 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
      private void displayListPrimes() {
        String inputText = listAllJTextField.getText().trim();
        try {
            int count = Integer.parseInt(inputText);
            List<Integer> primes = generatePrimes(count);
            StringBuilder sb = new StringBuilder();
            sb.append("The first ").append(count).append(" prime numbers are \n\n"); // Insert input value
            for (int i = 0; i < primes.size(); i++) {
                sb.append(primes.get(i));
                if ((i + 1) % 5 == 0) {
                    sb.append("\n"); // Add newline every 5 numbers
                } else {
                    sb.append("\t"); // Add tab between numbers
                }
            }
            displayTextArea.setText(sb.toString());
        } catch (NumberFormatException ex) {
            displayTextArea.setText("Invalid input. Please enter a valid number.");
    }
}

// Function to generate prime numbers up to a given limit
    private List<Integer> generatePrimes(int limit) {
        List<Integer> primes = new ArrayList<>();
        for (int num = 2; primes.size() < limit; num++) {
            boolean isPrime = true;
            for (int i = 2; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                primes.add(num);
            }
        }
        return primes;
    }

    private boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    private String primeFactorization(int num) {
        StringBuilder factors = new StringBuilder();
        factors.append(num).append(" = ");
        int divisor = 2;
        while (num > 1) {
            if (num % divisor == 0) {
                factors.append(divisor);
                num /= divisor;
                if (num > 1) {
                    factors.append(" * ");
                }
            } else {
                divisor++;
            }
        }
        return factors.toString();
    }

    private void displayTestPrimes() {

      String inputText = isPrimeJTextField.getText().trim();
        if (!inputText.isEmpty()) {
            try {
                int num = Integer.parseInt(inputText);
                if (isPrime(num)) {
                    displayTextArea.setText(num + " is a prime number.");
                } else {
                    String factorization = primeFactorization(num);
                    displayTextArea.setText(factorization);
                }
            } catch (NumberFormatException ex) {
                displayTextArea.setText("Invalid input. Please enter a valid number.");
            }
        } else {
            displayTextArea.setText("Please enter a number.");
        }
    }
    
    private boolean isPrime2(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    private String primeFactorizations(int num) {
        StringBuilder factors = new StringBuilder();
        factors.append(num).append(" = ");
        int divisor = 2;
        while (num > 1) {
            if (num % divisor == 0) {
                factors.append(divisor);
                num /= divisor;
                if (num > 1) {
                    factors.append(" * ");
                }
            } else {
                divisor++;
            }
        }
        return factors.toString();
    }

    private void displayPrimeFactorization() {
        String inputText = factorizationJTextField.getText().trim();
        if (!inputText.isEmpty()) {
            try {
                int num = Integer.parseInt(inputText);
                if (isPrime2(num)) {
                    displayTextArea.setText(num + " is a prime number.");
                } else {
                    // Check if the input already contains factorization
                    boolean isComposite = inputText.contains("=");
                    if (!isComposite) {
                        String factorization = primeFactorizations(num);
                        displayTextArea.setText(factorization);
                    } else {
                        displayTextArea.setText(inputText);
                    }
                }
            } catch (NumberFormatException ex) {
                displayTextArea.setText("Invalid input. Please enter a valid number.");
            }
        } else {
            displayTextArea.setText("Please enter a number.");
        }
    }

    private List<Integer> generatePrimesInRange(int low, int high) {
        List<Integer> primesInRange = new ArrayList<>();
        for (int num = low; num <= high; num++) {
            if (isPrime(num)) {
                primesInRange.add(num);
            }
        }
        return primesInRange;
    }

    private void displayRangePrimes() {
        String lowText = lowJTextField.getText().trim();
        String highText = highJTextField.getText().trim();
        if (!lowText.isEmpty() && !highText.isEmpty()) {
            try {
                int low = Integer.parseInt(lowText);
                int high = Integer.parseInt(highText);
                if (low < 2) {
                    displayTextArea.setText("Low value should be greater than or equal to 2.");
                    return;
                }
                if (low >= high) {
                    displayTextArea.setText("High value should be greater than low value.");
                    return;
                }
                List<Integer> primesInRange = generatePrimesInRange(low, high);
                if (primesInRange.isEmpty()) {
                    displayTextArea.setText("No prime numbers found in the specified range.");
                    return;
                }
                StringBuilder sb = new StringBuilder();
                sb.append("Prime numbers between ").append(low).append(" and ").append(high).append(" are:\n");
                for (int prime : primesInRange) {
                    sb.append(prime).append("\n");
                }
                displayTextArea.setText(sb.toString());
            } catch (NumberFormatException ex) {
                displayTextArea.setText("Invalid input. Please enter valid numbers.");
            }
        } else {
            displayTextArea.setText("Please enter both low and high values.");
        }
    }

    private List<Integer> generatePrimesInRange3(int low, int high) {
        List<Integer> primesInRange = new ArrayList<>();
        for (int num = low; num <= high; num++) {
            if (isPrime(num)) {
                primesInRange.add(num);
            }
        }
        return primesInRange;
    }

    private void displayGoldbachPrimes() {
        String goldbachText = goldbachJTextField.getText().trim();
        if (!goldbachText.isEmpty()) {
            try {
                int target = Integer.parseInt(goldbachText);
                if (target % 2 != 0 || target <= 2) {
                    displayTextArea.setText("Goldbach's conjecture is applicable only for even numbers greater than 2.");
                    return;
                }
                List<Integer> primesInRange = generatePrimesInRange3(2, target - 2); // Exclude 2 as it's the smallest prime
                StringBuilder sb = new StringBuilder();
                sb.append("Goldbach's conjecture pairs for ").append(target).append(":\n\n");
                int count = 0;
                for (int prime : primesInRange) {
                    int complement = target - prime;
                    if (primesInRange.contains(complement)) {
                        sb.append(target).append(" = ").append(prime).append(" + ").append(complement).append("\n\n");
                        count++;
                    }
                    if (count >= 5) { // Adjust the limit here as needed
                        break;
                    }
                }
                if (count == 0) {
                    sb.append("No Goldbach's conjecture pairs found for ").append(target).append(".");
                }
                displayTextArea.setText(sb.toString());
            } catch (NumberFormatException ex) {
                displayTextArea.setText("Invalid input. Please enter a valid number.");
            }
        } else {
            displayTextArea.setText("Please enter a number.");
        }
    }
    
    private void displayPalindromicPrimes() {
        String inputText = palindromicJTextField.getText().trim();
        if (!inputText.isEmpty()) {
            try {
                int count = Integer.parseInt(inputText);
                if (count <= 0) {
                    displayTextArea.setText("Please enter a positive integer.");
                    return;
                }
                List<Integer> palindromicPrimes = findPalindromicPrimes(count);
                if (palindromicPrimes.isEmpty()) {
                    displayTextArea.setText("No palindromic prime numbers found.");
                    return;
                }
                StringBuilder sb = new StringBuilder();
                sb.append("Palindromic prime numbers:\n\n");
                int numbersPerLine = 5; // Adjust this value to change the number of numbers per line
                for (int i = 0; i < palindromicPrimes.size(); i++) {
                    sb.append(palindromicPrimes.get(i)).append(" ");
                    if ((i + 1) % numbersPerLine == 0 || i == palindromicPrimes.size() - 1) {
                        sb.append("\n");
                    }
                }
                displayTextArea.setText(sb.toString());
            } catch (NumberFormatException ex) {
                displayTextArea.setText("Invalid input. Please enter a valid number.");
            }
        } else {
            displayTextArea.setText("Please enter a number.");
        }
    }

    private List<Integer> findPalindromicPrimes(int count) {
        List<Integer> palindromicPrimes = new ArrayList<>();
        int number = 2; // Start with the first prime number
        while (palindromicPrimes.size() < count) {
            if (isPrime(number) && isPalindrome(number)) {
                palindromicPrimes.add(number);
            }
            number++;
        }
        return palindromicPrimes;
    }

    private boolean isPalindrome(int number) {
        String numStr = String.valueOf(number);
        return numStr.equals(new StringBuilder(numStr).reverse().toString());
    }


    private void displayEmirpPrimes() {
        String inputText = emirpJTextField.getText().trim();
        if (!inputText.isEmpty()) {
            try {
                int count = Integer.parseInt(inputText);
                if (count <= 0) {
                    displayTextArea.setText("Please enter a positive integer.");
                    return;
                }
                List<Integer> emirps = findEmirps(count);
                if (emirps.isEmpty()) {
                    displayTextArea.setText("No emirp numbers found.");
                    return;
                }
                StringBuilder sb = new StringBuilder();
                sb.append("Emirp numbers:\n\n");
                int numbersPerLine = 5; // Adjust this value to change the number of numbers per line
                for (int i = 0; i < emirps.size(); i++) {
                    sb.append(emirps.get(i)).append(" ");
                    if ((i + 1) % numbersPerLine == 0 || i == emirps.size() - 1) {
                        sb.append("\n");
                    }
                }
                displayTextArea.setText(sb.toString());
            } catch (NumberFormatException ex) {
                displayTextArea.setText("Invalid input. Please enter a valid number.");
            }
        } else {
            displayTextArea.setText("Please enter a number.");
        }
    }

    private List<Integer> findEmirps(int count) {
        List<Integer> emirps = new ArrayList<>();
        int number = 2; // Start with the first prime number
        while (emirps.size() < count) {
            if (isPrime5(number) && isPrime5(reverseNumber(number)) && !isPalindrome5(number)) {
                emirps.add(number);
            }
            number++;
        }
        return emirps;
    }

    private int reverseNumber(int number) {
        int reversedNumber = 0;
        while (number != 0) {
            int digit = number % 10;
            reversedNumber = reversedNumber * 10 + digit;
            number /= 10;
        }
        return reversedNumber;
    }

    private boolean isPrime5(int number) {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }

    private boolean isPalindrome5(int number) {
        String numStr = String.valueOf(number);
        return numStr.equals(new StringBuilder(numStr).reverse().toString());
    }
    
    private void displaySophiePrimes() {
        String inputText = sophieGermainJTextField.getText().trim();
        if (!inputText.isEmpty()) {
            try {
                int count = Integer.parseInt(inputText);
                if (count <= 0) {
                    displayTextArea.setText("Please enter a positive integer.");
                    return;
                }
                List<Integer> sophieGermainPrimes = findSophieGermainPrimes(count);
                if (sophieGermainPrimes.isEmpty()) {
                    displayTextArea.setText("No Sophie Germain prime numbers found.");
                    return;
                }
                StringBuilder sb = new StringBuilder();
                sb.append("Sophie Germain prime numbers:\n\n");
                int numbersPerLine = 5; // Adjust this value to change the number of numbers per line
                for (int i = 0; i < sophieGermainPrimes.size(); i++) {
                    sb.append(sophieGermainPrimes.get(i)).append("   "); // Increase the spacing between numbers
                    if ((i + 1) % numbersPerLine == 0 || i == sophieGermainPrimes.size() - 1) {
                        sb.append("\n");
                    }
                }
                displayTextArea.setText(sb.toString());
            } catch (NumberFormatException ex) {
                displayTextArea.setText("Invalid input. Please enter a valid number.");
            }
        } else {
            displayTextArea.setText("Please enter a number.");
        }
    }

    private List<Integer> findSophieGermainPrimes(int count) {
        List<Integer> sophieGermainPrimes = new ArrayList<>();
        int number = 2; // Start with the first prime number
        while (sophieGermainPrimes.size() < count) {
            if (isPrime6(number) && isPrime6(2 * number + 1)) {
                sophieGermainPrimes.add(number);
            }
            number++;
        }
        return sophieGermainPrimes;
    }

    private boolean isPrime6(int number) {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
    
private void displaySafePrimes() {
    String inputText = safeJTextField.getText().trim();
    if (!inputText.isEmpty()) {
        try {
            int count = Integer.parseInt(inputText);
            if (count <= 0) {
                displayTextArea.setText("Please enter a positive integer.");
                return;
            }
            List<Integer> safePrimes = findSafePrimes(count);
            if (safePrimes.isEmpty()) {
                displayTextArea.setText("No safe prime numbers found.");
                return;
            }
            StringBuilder sb = new StringBuilder();
            sb.append("Safe prime numbers:\n");
            int numbersPerLine = 5; // Adjust this value to change the number of numbers per line
            for (int i = 0; i < safePrimes.size(); i++) {
                sb.append(safePrimes.get(i));
                if ((i + 1) % numbersPerLine == 0 || i == safePrimes.size() - 1) {
                    sb.append("\n");
                } else {
                    sb.append(", ");
                }
            }
            displayTextArea.setText(sb.toString());
        } catch (NumberFormatException ex) {
            displayTextArea.setText("Invalid input. Please enter a valid number.");
        }
    } else {
        displayTextArea.setText("Please enter a number.");
    }
}

private List<Integer> findSafePrimes(int count) {
    List<Integer> safePrimes = new ArrayList<>();
    int number = 5; // Start with the first safe prime number
    while (safePrimes.size() < count) {
        if (isPrime9(number) && isPrime(2 * number + 1)) {
            safePrimes.add(number);
        }
        number++;
    }
    return safePrimes;
}

private boolean isPrime9(int number) {
    if (number <= 1) {
        return false;
    }
    for (int i = 2; i <= Math.sqrt(number); i++) {
        if (number % i == 0) {
            return false;
        }
    }
    return true;
}



    private void calculateJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_calculateJButtonActionPerformed
    {//GEN-HEADEREND:event_calculateJButtonActionPerformed
        // Find primes for each selection
        displayTextArea.setText("");    // clear display area
        int whichButton = getButton();  // decide which radio button is selected
        switch(whichButton)
        {
            case 1:             // display the first n prime numbers
            {
                //listPrimes();
                displayListPrimes();
                break;
            }

            case 2:		// yields yes or no on prime for a given number
            {
                //testPrimes();
                displayTestPrimes();
                break;
            }
            case 3:             // prime factorization
            {
                //primeFactorization();
                displayPrimeFactorization();
                break;
            }

            case 4:             // range of prime numbers
            {
                //rangePrimes();
                displayRangePrimes();
                break;
            }
            case 5:             // Goldbach's conjecture
            {
                //goldbachPrimes();
                displayGoldbachPrimes();
                break;
            }
            case 6:             // palindromic primes--reversal is a prime
            {
                //palindromicPrimes();
                displayPalindromicPrimes();
                break;
            }
             case 7:             // emirp primes--nonpalindromic reversal is a prime
            {
                //emirpPrimes();
                displayEmirpPrimes();
                break;
            } 
            case 8:             // Sophie Germain primes
            {
                //sophiePrimes();
                displaySophiePrimes();
                break;
            } 
            case 9:             // safe primea--primes of the form 2p + 1
            {
                //safePrimes();
                displaySafePrimes();
                break;
            }
        } //end switch
    }//GEN-LAST:event_calculateJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       listPrimes--case 1.
     * Description  Method to list user selected number of primes.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       listPrimes--case 2.
     * Description  Method to test if a give number is a prime.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
   
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       primeFactorization--case 3.
     * Description  Method to factor a composite number into product of primes. 
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       rangePrimes--case 4.
     * Description  Method to list primes in specified range. 
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       goldbachPrimes--case 5.
     * Description  Method to list distinct combinations of two primes whose
     *              sum is the an even trial number. 
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       palindromicPrime--case 6.
     * Description  Method to list specified number of palindromic primes. A
     *              palindromic prime is a prime number whoe reverse is also
     *              a prime.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       emirpPrimes--case 7.
     * Description  Method to list specified number of emirps. An emirp is a
     *              nonpalindromic prime whose reverse is also a prime.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       sophiePrimes--case 8.
     * Description  Method to find Sophie primes--In number theory, a prime 
     *              number p is a Sophie Germain prime if 2p + 1 is also prime.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       safePrimes--case 9.
     * Description  Method to find safe primes--In number theory, a prime 
     *              number p is a safe if it is of the form 2p + 1 where p 
     *              also prime.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       isPrime
     * Description  Method to determine is given parameter is a prime number. 
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       isPalindrome
     * Description  Method to determine is given number is a palindrome. 
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      true/false boolean
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       reverse
     * Description  Method to return the reverse of a number. 
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      reverse int
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       getButton
     * Description  Method to select which primes operation to perform. 
     *              try/catch purposely omitted to demonstrate error 
     *              propegation
     * Date         4/3/2020
     * History Log  7/18/2018
     * @return      which int
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private int getButton()
    {
        if (listAllJRadioButton.isSelected())
            return 1;			// first radio button selected
        else if (isPrimeJRadioButton.isSelected())
            return 2;		// second radio button selected
        else if (factorizationJRadioButton.isSelected())
            return 3;	// third radio button selected
        else if (rangeJRadioButton.isSelected())
            return 4;	// fourth radio button selected
        else if (goldbachJRadioButton.isSelected())
            return 5;
        else if (palindromicJRadioButton.isSelected())
            return 6;
        else if (emirpJRadioButton.isSelected())
            return 7;
        else if (sophieGermainJRadioButton.isSelected())
            return 8;
        else 
            return 9;
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
     * Method       clearJButtonActionPerformed()
     * Description  Event handler to clear and resert form
     * @param       evt ActionEvent
     * @see         java.awt.event.ActionEvent
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018    
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearJButtonActionPerformed
    {//GEN-HEADEREND:event_clearJButtonActionPerformed
        // Clear all, set focus on listAllJRadioButton
        listAllJRadioButton.setSelected(true);
        displayTextArea.setText("");
        listAllJTextField.setText("");
        listAllJTextField.requestFocus();
    }//GEN-LAST:event_clearJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       printJButtonActionPerformed()
     * Description  Print inforamation displayed in JTextArea.
     * Date         4/3/2020
     * History Log  7/18/2018, 1/5/2019
     * @param       evt java.awt.event.ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printJButtonActionPerformed
    {//GEN-HEADEREND:event_printJButtonActionPerformed
        try
        {
            displayTextArea.print();
        }
        catch (PrinterException ex)
        {
            JOptionPane.showMessageDialog( null,"Cannot print",
                "Printer Error", JOptionPane.WARNING_MESSAGE );
        }
    }//GEN-LAST:event_printJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       quitJButtonActionPerformed()
     * Description  End application.
     * @param       evt java.awt.event.ActionEvent
     * Date         4/3/2020
     * History Log  7/18/2018  
     * @author      <i>Niko Culevski</i>
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void quitJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJButtonActionPerformed
    {//GEN-HEADEREND:event_quitJButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       safeJRadioButtonMenuItemActionPerformed
     * Description  Select safe radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void safeJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_safeJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_safeJRadioButtonMenuItemActionPerformed
        safeJRadioButton.setSelected(true);
    }//GEN-LAST:event_safeJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       sophieGermainJRadioButtonMenuItemActionPerformed
     * Description  Select safe radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void sophieGermainJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sophieGermainJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_sophieGermainJRadioButtonMenuItemActionPerformed
        sophieGermainJRadioButton.setSelected(true);
    }//GEN-LAST:event_sophieGermainJRadioButtonMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       palindromicJTextFieldActionPerformed
     * Description  Event handler to call calculateJButtonActionPerformed
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void palindromicJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_palindromicJTextFieldActionPerformed
    {//GEN-HEADEREND:event_palindromicJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_palindromicJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       palindromicJRadioButtonActionPerformed
     * Description  Select palindromic radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void palindromicJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_palindromicJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_palindromicJRadioButtonActionPerformed
        palindromicJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_palindromicJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       palindromicJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void palindromicJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_palindromicJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_palindromicJRadioButtonItemStateChanged
        // Enable corresponding text field
        if (palindromicJRadioButton.isSelected())
        {
            whichRadio = 6;
            palindromicJTextField.setEditable(true);
            palindromicJTextField.requestFocus();
        }
        else
        {
            palindromicJTextField.setText("");
            palindromicJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_palindromicJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       safeJTextFieldActionPerformed
     * Description  Event handler to call calculateJButtonActionPerformed
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void safeJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_safeJTextFieldActionPerformed
    {//GEN-HEADEREND:event_safeJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_safeJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       sophieGermainJTextFieldActionPerformed
     * Description  Event handler to call calculateJButtonActionPerformed
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void sophieGermainJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sophieGermainJTextFieldActionPerformed
    {//GEN-HEADEREND:event_sophieGermainJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_sophieGermainJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       safeJRadioButtonActionPerformed
     * Description  Select safe radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void safeJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_safeJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_safeJRadioButtonActionPerformed
        // Select the corresponding menu choice
        /*
        A safe prime is a prime number of the form 2p + 1, where p is also a
        prime. (Conversely, the prime p is a Sophie Germain prime.) The first
        few safe primes are:
        5, 7, 11, 23, 47, 59, 83, 107, 167, 179, 227, 263, 347, 359, 383, ...
        */
        safeJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_safeJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       safeJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void safeJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_safeJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_safeJRadioButtonItemStateChanged
        // Enable corresponding text field
        if (safeJRadioButton.isSelected())
        {
            whichRadio = 9;
            safeJTextField.setEditable(true);
            safeJTextField.requestFocus();
        }
        else
        {
            safeJTextField.setText("");
            safeJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_safeJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       sophieGermainJRadioButtonActionPerformed
     * Description  Select sophieGermain radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void sophieGermainJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sophieGermainJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_sophieGermainJRadioButtonActionPerformed
        // Select the corresponding menu choice
        /*
        In number theory, a prime number p is a Sophie Germain prime if 2p + 1
        is also prime. The number 2p + 1 associated with a Sophie Germain prime
        is called a safe prime. For example, 11 is a Sophie Germain prime and
        2 × 11 + 1 = 23 is its associated safe prime. Sophie Germain primes are
        named after French mathematician Sophie Germain, who used them in her
        investigations of Fermat's Last Theorem.[1] Sophie Germain primes and
        safe primes have applications in public key cryptography and primality
        testing. It has been conjectured that there are infinitely many Sophie
        Germain primes, but this remains unproven.
        The first few Sophie Germain primes are:
        2, 3, 5, 11, 23, 29, 41, 53, 83, 89, 113, 131, 173, 179, 191, 233, ...
        */
        sophieGermainJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_sophieGermainJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       sophieGermainJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void sophieGermainJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_sophieGermainJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_sophieGermainJRadioButtonItemStateChanged
        // Enable corresponding text field
        if (sophieGermainJRadioButton.isSelected())
        {
            whichRadio = 8;
            sophieGermainJTextField.setEditable(true);
            sophieGermainJTextField.requestFocus();
        }
        else
        {
            sophieGermainJTextField.setText("");
            sophieGermainJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_sophieGermainJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       emirpJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void emirpJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_emirpJTextFieldActionPerformed
    {//GEN-HEADEREND:event_emirpJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_emirpJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       emirpJRadioButtonActionPerformed
     * Description  Select emirp radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void emirpJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_emirpJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_emirpJRadioButtonActionPerformed
        emirpJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_emirpJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       emirpJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void emirpJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_emirpJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_emirpJRadioButtonItemStateChanged
        if (emirpJRadioButton.isSelected())
        {
            whichRadio = 6;
            emirpJTextField.setEditable(true);
            emirpJTextField.requestFocus();
        }
        else
        {
            emirpJTextField.setText("");
            emirpJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_emirpJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       goldbachJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void goldbachJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goldbachJTextFieldActionPerformed
    {//GEN-HEADEREND:event_goldbachJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_goldbachJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       goldbachJRadioButtonActionPerformed
     * Description  Select goldbach radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void goldbachJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goldbachJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_goldbachJRadioButtonActionPerformed
        goldbachJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_goldbachJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       goldbachJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void goldbachJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_goldbachJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_goldbachJRadioButtonItemStateChanged
        if (goldbachJRadioButton.isSelected())
        {
            whichRadio = 5;
            goldbachJTextField.setEditable(true);
            goldbachJTextField.requestFocus();
        }
        else
        {
            goldbachJTextField.setText("");
            goldbachJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_goldbachJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void highJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_highJTextFieldActionPerformed
    {//GEN-HEADEREND:event_highJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_highJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void lowJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lowJTextFieldActionPerformed
    {//GEN-HEADEREND:event_lowJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_lowJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       rangeJRadioButtonActionPerformed
     * Description  Select range radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void rangeJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rangeJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_rangeJRadioButtonActionPerformed
        rangeOfPrimesJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_rangeJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       rangeJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void rangeJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_rangeJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_rangeJRadioButtonItemStateChanged
        if (rangeJRadioButton.isSelected())
        {
            whichRadio = 4;
            lowJTextField.setEditable(true);
            highJTextField.setEditable(true);
            lowJTextField.requestFocus();
        }
        else
        {
            lowJTextField.setText("");
            highJTextField.setText("");
            lowJTextField.setEditable(false);
            highJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_rangeJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void factorizationJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_factorizationJTextFieldActionPerformed
    {//GEN-HEADEREND:event_factorizationJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_factorizationJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       factorizationJRadioButtonActionPerformed
     * Description  Select primeFactorization radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void factorizationJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_factorizationJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_factorizationJRadioButtonActionPerformed
        primeFactorizationJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_factorizationJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       factorizationJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void factorizationJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_factorizationJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_factorizationJRadioButtonItemStateChanged
        if (factorizationJRadioButton.isSelected())
        {
            whichRadio = 3;
            factorizationJTextField.setEditable(true);
            factorizationJTextField.requestFocus();
        }
        else
        {
            factorizationJTextField.setText("");
            factorizationJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_factorizationJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void isPrimeJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_isPrimeJTextFieldActionPerformed
    {//GEN-HEADEREND:event_isPrimeJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_isPrimeJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       isPrimeJRadioButtonActionPerformed
     * Description  Select isPrime radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void isPrimeJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_isPrimeJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_isPrimeJRadioButtonActionPerformed
        testForPrimeJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_isPrimeJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       isPrimeJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void isPrimeJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_isPrimeJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_isPrimeJRadioButtonItemStateChanged
        if (isPrimeJRadioButton.isSelected())
        {
            whichRadio = 2;
            isPrimeJTextField.setEditable(true);
            isPrimeJTextField.requestFocus();
        }
        else
        {
            isPrimeJTextField.setText("");
            isPrimeJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_isPrimeJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void listAllJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_listAllJTextFieldActionPerformed
    {//GEN-HEADEREND:event_listAllJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_listAllJTextFieldActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       listAllJRadioButtonActionPerformed
     * Description  Select listAll radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void listAllJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_listAllJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_listAllJRadioButtonActionPerformed
        listPrimesJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_listAllJRadioButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       listAllJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ItemEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void listAllJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_listAllJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_listAllJRadioButtonItemStateChanged
        if (listAllJRadioButton.isSelected())
        {
            whichRadio = 1;
            listAllJTextField.setEditable(true);
            listAllJTextField.requestFocus();
        }
        else
        {
            listAllJTextField.setText("");
            listAllJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_listAllJRadioButtonItemStateChanged
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       palindromicJRadioButtonMenuItemActionPerformed
     * Description  Select palindromic radio button.
     * Date         4/3/2020
     * History Log  7/18/2018
     * @param       evt ActionEvent
     * @author      <i>Niko Culevski</i>
     *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void palindromicJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_palindromicJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_palindromicJRadioButtonMenuItemActionPerformed
        palindromicJRadioButton.setSelected(true);
    }//GEN-LAST:event_palindromicJRadioButtonMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
     * Method       main()
     * Description  Displays splash screen and main Philosophers GUI form
     * Date         4/7/2020     
     * History log 
     * @param       args are the command line strings
     * @author      <i>Niko Culevski</i>
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public static void main(String args[])
    {
        // Show splash screen
        Splash mySplash = new Splash(4000);     // duration = 4 seconds
        mySplash.showSplash();                  // show splash screen
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new PrimesGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutrJMenuItem;
    private javax.swing.JMenu actionJMenu;
    private javax.swing.JButton calculateJButton;
    private javax.swing.JPanel choiceJPanel;
    private javax.swing.JButton clearJButton;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel displayJPanel;
    private javax.swing.JScrollPane displayJScrollPanel;
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JRadioButton emirpJRadioButton;
    private javax.swing.JRadioButtonMenuItem emirpJRadioButtonMenuItem;
    private javax.swing.JTextField emirpJTextField;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JRadioButton factorizationJRadioButton;
    private javax.swing.JTextField factorizationJTextField;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JLabel fromJLabel;
    private javax.swing.JRadioButton goldbachJRadioButton;
    private javax.swing.JRadioButtonMenuItem goldbachJRadioButtonMenuItem;
    private javax.swing.JTextField goldbachJTextField;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JTextField highJTextField;
    private javax.swing.JRadioButton isPrimeJRadioButton;
    private javax.swing.JTextField isPrimeJTextField;
    private javax.swing.JRadioButton listAllJRadioButton;
    private javax.swing.JTextField listAllJTextField;
    private javax.swing.JRadioButtonMenuItem listPrimesJRadioButtonMenuItem;
    private javax.swing.JTextField lowJTextField;
    private javax.swing.ButtonGroup menuJButtonGroup;
    private javax.swing.JRadioButton palindromicJRadioButton;
    private javax.swing.JRadioButtonMenuItem palindromicJRadioButtonMenuItem;
    private javax.swing.JTextField palindromicJTextField;
    private javax.swing.JRadioButtonMenuItem primeFactorizationJRadioButtonMenuItem;
    private javax.swing.JMenuBar primesJMenuBar;
    private javax.swing.JButton printJButton;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JButton quitJButton;
    private javax.swing.ButtonGroup radioJButtonGroup;
    private javax.swing.JRadioButton rangeJRadioButton;
    private javax.swing.JRadioButtonMenuItem rangeOfPrimesJRadioButtonMenuItem;
    private javax.swing.JRadioButton safeJRadioButton;
    private javax.swing.JRadioButtonMenuItem safeJRadioButtonMenuItem;
    private javax.swing.JTextField safeJTextField;
    private javax.swing.JRadioButton sophieGermainJRadioButton;
    private javax.swing.JRadioButtonMenuItem sophieGermainJRadioButtonMenuItem;
    private javax.swing.JTextField sophieGermainJTextField;
    private javax.swing.JRadioButtonMenuItem testForPrimeJRadioButtonMenuItem;
    private javax.swing.JLabel toJLabel;
    // End of variables declaration//GEN-END:variables
}